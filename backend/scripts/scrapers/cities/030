#!/usr/bin/env python3
# scrapes council member names and images.
import os
import json
import requests
import logging
from datetime import datetime
from bs4 import BeautifulSoup as BS

# Change based off of which site being scraped
CITY_ID = 30
CITY_COUNCIL_URL = 'https://www.boston.gov/'
PATH_ID = f'0{CITY_ID}'

CURR_DATE = datetime.now().strftime('%d_%m_%Y')
LOG_FILENAME = f'log_{CURR_DATE}.txt'

log_format = '%(asctime)s - %(levelname)s - %(message)s'
logging.basicConfig(filename=LOG_FILENAME,
                    level=logging.INFO,
                    format=log_format)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(log_format))
logging.getLogger().addHandler(console_handler)


def parse_json(results):
    json_arr = []
    for result in results:
        data = {}
        data['city_id'] = CITY_ID
        # council_member usually needs to be changed
        data['council_member'] = result
        data['img_url'] = None
        json_arr.append(data)
    with open(f'./new_council_members/json/{PATH_ID}.json', 'w') as writeJSON:
        json.dump(json_arr, writeJSON, ensure_ascii=False)


def grab_mayor_url():
    try:
        html = requests.get(CITY_COUNCIL_URL).content
        soup = BS(html, 'lxml')
        # results is usually what needs to get changed
        results = soup.findAll('div',
                               {"class": "field-name-field-right-column"})
        mayor_url = ''
        for result in results:
            res = result.findAll('a', {"class": "button"})
            for r in res:
                if 'href' in r.attrs:
                    mayor_url = f"{CITY_COUNCIL_URL}{r['href']}"
        return mayor_url
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


def grab_council_names():
    try:
        members = []
        html = requests.get(CITY_COUNCIL_URL).content
        soup = BS(html, 'lxml')
        # results is usually what needs to get changed
        results = soup.findAll('div', {"class": "cdp-t"})
        for result in results:
            members.append(result.contents[0].strip())
        return members
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


def grab_and_append_mayor_name(mayor_url, members_names):
    try:
        html = requests.get(mayor_url).content
        soup = BS(html, 'lxml')
        # results is usually what needs to get changed
        results = soup.findAll('h1', {"class": "page-title"})
        mayor_name = results[0].contents[0].strip()
        members_names.insert(0, mayor_name)
        return members_names
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


if __name__ == "__main__":
    mayor_url = grab_mayor_url()
    members_names = grab_council_names()
    results = grab_and_append_mayor_name(mayor_url, members_names)
    if results:
        parse_json(results)
    logging.info(f'No images scraped for city_id: {CITY_ID}')
