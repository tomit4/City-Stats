#!/usr/bin/env python3
# scrapes new senators names and images.
import os
import json
import logging
import copy
from datetime import datetime
# Use requests_html when JS is required on website
# https://requests.readthedocs.io/projects/requests-html/en/latest/
from requests_html import HTMLSession

session = HTMLSession()

# Change based off of which site being scraped
BASE_URL = 'https://en.wikipedia.org/w/index.php?title=List_of_current_United_States_senators'
# TODO: dynamically generate state ids
#  BASE_IMG_PATH = f'https://www.citystats.xyz/images/states/{STATE_ID}/senator/'

CURR_DATE = datetime.now().strftime('%d_%m_%Y')
LOG_FILENAME = f'log_{CURR_DATE}.txt'
os.makedirs(f'./new_congress/json/', exist_ok=True)

log_format = '%(asctime)s - %(levelname)s - %(message)s'
logging.basicConfig(filename=LOG_FILENAME,
                    level=logging.INFO,
                    format=log_format)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(log_format))
logging.getLogger().addHandler(console_handler)

#  def download_images(img_arr):
#  for i, img_url in enumerate(img_arr):
#  # uri string conversion (i.e. %20 spaces %3F question marks, etc.)
#  if '.png' in img_url:
#  file_name = f'./new_council_members/img/{PATH_ID}/{PATH_ID}_{i}.png'
#  else:
#  file_name = f'./new_council_members/img/{PATH_ID}/{PATH_ID}_{i}.jpg'
#  # 403 passed without user agent string
#  img_data = requests.get(
#  img_url,
#  stream=True,
#  headers={
#  'User-agent': 'Mozilla/5.0'
#  },
#  ).content
#  file = open(f'{file_name}', 'wb')
#  file.write(img_data)
#  logging.info(
#  f'Downloaded image for city_id: {CITY_ID}, {i + 1} of {len(img_arr)}'
#  )

#  def parse_json(results):
#  json_arr = []
#  for result in results:
#  data = {}
#  # TODO: dynamically generate state ids
#  #  data['state_id'] = STATE_ID
#  data['senator'] = result
#  json_arr.append(data)
#  for i, data in enumerate(json_arr):
#  data['img_url'] = f'{BASE_IMG_PATH}/{i}'
#  with open(f'./new_senate_members/json/{PATH_ID}.json', 'w') as writeJSON:
#  json.dump(json_arr, writeJSON, ensure_ascii=False)

#  def grab_member_img():
#  try:
#  r = session.get(CITY_COUNCIL_URL)
#  # r.html actually works, lsp doesn't like it for some reason...
#  data = []
#  results = r.html.find('.clearfix')
#  for result in results:
#  images = result.find('img')
#  for image in images:
#  if 'src' in image.attrs:
#  if image.attrs['src'] not in data:
#  data.append(image.attrs['src'])
#  return data
#  except Exception as e:
#  logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
#  return False


def scrape_data():
    try:
        r = session.get(BASE_URL)
        # r.html actually works, lsp doesn't like it for some reason...
        results = r.html.find('#senators')
        state_data = []
        state_names = []
        new_data = {}
        for result in results:
            trs = result.find('tr')
            data = {'state_name': '', 'senator_name': ''}
            for tr in trs:
                tds = tr.find('td')
                for i, td in enumerate(tds):
                    if 'rowspan' in td.attrs:
                        data['state_name'] = td.text
                        state_names.append(td.text)

                ths = tr.find('th')
                for th in ths:
                    v_cards = th.find('.vcard')
                    for v_card in v_cards:
                        data['senator_name'] = v_card.text
                        new_data = data
                if new_data:
                    state_data.append(copy.deepcopy(new_data))
        ids_names = []
        id_name = {}
        for i, sn in enumerate(state_names):
            id_name['id'] = i + 1
            id_name['state_name'] = sn
            ids_names.append(copy.deepcopy(id_name))

        for i, data in enumerate(state_data):
            for id_name in ids_names:
                if data['state_name'] == id_name['state_name']:
                    state_data[i]['state_id'] = id_name['id']
            del state_data[i]['state_name']
        return state_data
    except Exception as e:
        logging.error(f'Error at during scraping: {str(e)}')
        return False


if __name__ == "__main__":
    senator_names = scrape_data()
    if senator_names:
        with open(f'./new_congress/json/base_state_senators.json',
                  'w') as writeJSON:
            json.dump(senator_names, writeJSON, ensure_ascii=False)
    #  if results:
    #  parse_json(results)
    #  member_img_urls = grab_member_img()
    #  img_urls = prepend_mayor_img_url_to(member_img_urls)
    #  download_images(img_urls)
