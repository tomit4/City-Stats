#!/usr/bin/env python3
# scrapes council member names and images.
import json
import logging
from datetime import datetime
# Use requests_html when JS is required on website
# https://requests.readthedocs.io/projects/requests-html/en/latest/
from requests_html import HTMLSession

session = HTMLSession()

# Change based off of which site being scraped
CITY_ID = 265
BASE_URL = 'https://www.sanjoseca.gov'
CITY_COUNCIL_URL = 'https://www.sanjoseca.gov/your-government/departments-offices/mayor-and-city-council/'
MAYOR_URL = 'https://en.wikipedia.org/wiki/San_Jose_California'
BASE_IMG_PATH = f'https://www.citystats.xyz/images/cities/{CITY_ID}'

PATH_ID = f'{CITY_ID}'
IMG_PATH = f'./new_council_members/img/{PATH_ID}/'

CURR_DATE = datetime.now().strftime('%d_%m_%Y')
LOG_FILENAME = f'log_{CURR_DATE}.txt'

log_format = '%(asctime)s - %(levelname)s - %(message)s'
logging.basicConfig(filename=LOG_FILENAME,
                    level=logging.INFO,
                    format=log_format)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(log_format))
logging.getLogger().addHandler(console_handler)


def parse_json(results):
    json_arr = []
    for result in results:
        data = {}
        data['city_id'] = CITY_ID
        # council_member usually needs to be changed
        data['council_member'] = result
        data['img_url'] = None
        json_arr.append(data)
    with open(f'./new_council_members/json/{PATH_ID}.json', 'w') as writeJSON:
        json.dump(json_arr, writeJSON, ensure_ascii=False)


def prepend_mayor_to(member_names):
    try:
        r = session.get(MAYOR_URL)
        # r.html actually works, lsp doesn't like it for some reason...
        results = r.html.find('.mergedrow')
        for result in results:
            ths = result.find('th')
            for th in ths:
                if 'Mayor' in th.text:
                    tds = result.find('.infobox-data')
                    for td in tds:
                        member_names.insert(0, td.text.split('[')[0])
        return member_names
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


def grab_member_names_from(district_urls):
    try:
        data = []
        for url in district_urls:
            r = session.get(url)
            # r.html actually works, lsp doesn't like it for some reason...
            data = []
            results = r.html.find('.sidenav_expanded')
            for result in results:
                a_tags = result.find('a')
                for a_tag in a_tags:
                    if 'href' in a_tag.attrs:
                        if 'mayor-and-city-council' in a_tag.attrs['href']:
                            if 'Biography' in a_tag.text or 'About' in a_tag.text:
                                if a_tag.text not in data:
                                    data.append(a_tag.text)
        for i, d in enumerate(data):
            if 'Biography' in d:
                data[i] = d.split(' Biography')[0]
            elif 'About' in d:
                data[i] = d.split('About ')[1]
        return data
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


def grab_member_urls_from(district_urls):
    try:
        data = []
        for url in district_urls:
            r = session.get(url)
            # r.html actually works, lsp doesn't like it for some reason...
            data = []
            results = r.html.find('.sidenav_expanded')
            for result in results:
                a_tags = result.find('a')
                for a_tag in a_tags:
                    if 'href' in a_tag.attrs:
                        if 'mayor-and-city-council' in a_tag.attrs['href']:
                            if 'Biography' in a_tag.text or 'About' in a_tag.text:
                                if a_tag.attrs['href'] not in data:
                                    data.append(a_tag.attrs['href'])
        return data
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


def scrape_data():
    try:
        r = session.get(CITY_COUNCIL_URL)
        # r.html actually works, lsp doesn't like it for some reason...
        data = []
        results = r.html.find('.sidenav_expanded')
        for result in results:
            a_tags = result.find('a')
            for a_tag in a_tags:
                if 'href' in a_tag.attrs and 'district-' in a_tag.attrs['href']:
                    data.append(a_tag.attrs['href'])
        data.pop()
        return data
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


if __name__ == "__main__":
    district_urls = scrape_data()
    member_names = grab_member_names_from(district_urls)
    results = prepend_mayor_to(member_names)
    if results:
        parse_json(results)
    logging.info(f'No images scraped for city_id: {CITY_ID}')
