#!/usr/bin/env python3
# scrapes council member names and images.
from enum import member
import json
import logging
from datetime import datetime
# Use requests_html when JS is required on website
# https://requests.readthedocs.io/projects/requests-html/en/latest/
from requests_html import HTMLSession

session = HTMLSession()

# Change based off of which site being scraped
CITY_ID = 74
BASE_URL = 'https://www.davenportiowa.com'
CITY_COUNCIL_URL = 'https://www.davenportiowa.com/government/mayor_council/city_council'
MAYOR_URL = 'https://www.davenportiowa.com/government/mayor_council/mayors_office/mayors_bio'

PATH_ID = f'0{CITY_ID}'

CURR_DATE = datetime.now().strftime('%d_%m_%Y')
LOG_FILENAME = f'log_{CURR_DATE}.txt'

log_format = '%(asctime)s - %(levelname)s - %(message)s'
logging.basicConfig(filename=LOG_FILENAME,
                    level=logging.INFO,
                    format=log_format)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(log_format))
logging.getLogger().addHandler(console_handler)


def parse_json(results):
    json_arr = []
    for result in results:
        data = {}
        data['city_id'] = CITY_ID
        # council_member usually needs to be changed
        data['council_member'] = result
        data['img_url'] = None
        json_arr.append(data)
    with open(f'./new_council_members/json/{PATH_ID}.json', 'w') as writeJSON:
        json.dump(json_arr, writeJSON, ensure_ascii=False)


def scrape_data():
    try:
        r = session.get(CITY_COUNCIL_URL)
        # r.html actually works, lsp doesn't like it for some reason...
        data = []
        results = r.html.find('ul.sidenav')
        for result in results:
            res = result.find('a')
            for r in res:
                if 'href' in r.attrs:
                    data.append(f"{BASE_URL}{r.attrs['href']}")
        data.insert(0, MAYOR_URL)
        return data
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


def grab_names_from(member_urls):
    try:
        data = []
        for url in member_urls:
            r = session.get(url)
            # r.html actually works, lsp doesn't like it for some reason...
            results = r.html.find(
                '#ctl00_ContentPlaceHolder1_ctl10_divContent')
            for result in results:
                res = result.find('h2')
                for r in res:
                    data.append(r.text)
        for i, d in enumerate(data):
            if '(' in d:
                new_d = d.replace('(', '')
                data[i] = new_d.replace(')', '')
            elif 'vacant' in d.lower():
                del data[i]
        for i, d in enumerate(data):
            if 'Mayor' in d:
                inter_arr = d.split('Mayor ')[1].lower().split(' ')
                temp = []
                for word in inter_arr:
                    temp.append(word.capitalize())
                data[i] = ' '.join(temp)
            else:
                inter_arr = d.split(',')[0].lower().split(' ')
                temp = []
                for word in inter_arr:
                    temp.append(word.capitalize())
                data[i] = ' '.join(temp)
        return data
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


if __name__ == "__main__":
    member_urls = scrape_data()
    results = grab_names_from(member_urls)
    if results:
        parse_json(results)
    logging.info(f'No images scraped for city_id: {CITY_ID}')
