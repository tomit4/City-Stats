#!/usr/bin/env python3
# scrapes council member names and images.
import os
import json
import requests
import logging
from datetime import datetime
from bs4 import BeautifulSoup as BS

# Change based off of which site being scraped
CITY_ID = 21
CITY_COUNCIL_URL = 'https://www.baltimorecitycouncil.com/council-members'
MAYOR_URL = 'https://mayor.baltimorecity.gov/'
PATH_ID = f'0{CITY_ID}'

CURR_DATE = datetime.now().strftime('%d_%m_%Y')
LOG_FILENAME = f'log_{CURR_DATE}.txt'

log_format = '%(asctime)s - %(levelname)s - %(message)s'
logging.basicConfig(filename=LOG_FILENAME,
                    level=logging.INFO,
                    format=log_format)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(log_format))
logging.getLogger().addHandler(console_handler)


def parse_json(results):
    json_arr = []
    for result in results:
        data = {}
        data['city_id'] = CITY_ID
        # council_member usually needs to be changed
        data['council_member'] = result
        data['img_url'] = None
        json_arr.append(data)
    with open(f'./new_council_members/json/{PATH_ID}.json', 'w') as writeJSON:
        json.dump(json_arr, writeJSON, ensure_ascii=False)


def scrape_data():
    try:
        html = requests.get(CITY_COUNCIL_URL).content
        soup = BS(html, 'lxml')
        # results is usually what needs to get changed
        results = soup.findAll('table', {"class": "views-view-grid cols-2"})
        data = []
        for result in results:
            res = result.findAll('span', {"class": "red"})
            for r in res:
                if len(r):
                    data.append(r.text.strip())
        return data
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


def append_mayor(members_arr):
    try:
        html = requests.get(MAYOR_URL).content
        soup = BS(html, 'lxml')
        # results is usually what needs to get changed
        results = soup.findAll('h1', {"class": "title"})
        inter_arr = results[0].text.strip().split(' ')
        data = []
        for el in inter_arr:
            if 'Mayor' not in el:
                data.append(el)

        data = ' '.join(data)
        members_arr.insert(0, data)
        return members_arr
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


if __name__ == "__main__":
    results = scrape_data()
    results = append_mayor(results)
    if results:
        parse_json(results)
        logging.info(f'No images scraped for city_id: {CITY_ID}')
