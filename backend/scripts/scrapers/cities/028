#!/usr/bin/env python3
# scrapes council member names and images.
import os
import json
import requests
import logging
from datetime import datetime
from bs4 import BeautifulSoup as BS

# Change based off of which site being scraped
CITY_ID = 28
BASE_URL = 'https://www.birminghamal.gov/'
CITY_COUNCIL_URL = 'https://www.birminghamalcitycouncil.org/'
PATH_ID = f'0{CITY_ID}'
IMG_PATH = f'./new_council_members/img/{PATH_ID}/'
MAYOR_NAME_URL = 'https://en.wikipedia.org/wiki/Birmingham_alabama'
MAYOR_IMG_URL = 'https://www.birminghamal.gov/about/mayors-office/'
BASE_IMG_PATH = f'https://www.citystats.xyz/images/cities/{CITY_ID}'
CURR_DATE = datetime.now().strftime('%d_%m_%Y')
LOG_FILENAME = f'log_{CURR_DATE}.txt'

os.makedirs(os.path.dirname(IMG_PATH), exist_ok=True)

log_format = '%(asctime)s - %(levelname)s - %(message)s'
logging.basicConfig(filename=LOG_FILENAME,
                    level=logging.INFO,
                    format=log_format)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(log_format))
logging.getLogger().addHandler(console_handler)


def download_images(img_arr):
    for i, img_url in enumerate(img_arr):
        file_name = f'./new_council_members/img/{PATH_ID}/{PATH_ID}_{i}.jpg'
        img_data = requests.get(img_url).content
        file = open(f'{file_name}', 'wb')
        file.write(img_data)
        logging.info(
            f'Downloaded image for city_id: {CITY_ID}, {i + 1} of {len(img_arr)}'
        )


def parse_json(results):
    json_arr = []
    for result in results:
        data = {}
        data['city_id'] = CITY_ID
        # council_member usually needs to be changed
        data['council_member'] = result
        json_arr.append(data)
    for i, data in enumerate(json_arr):
        if i == 0:
            data['img_url'] = f'{BASE_IMG_PATH}/mayor'
        else:
            data['img_url'] = f'{BASE_IMG_PATH}/city_council/{i}'
    with open(f'./new_council_members/json/{PATH_ID}.json', 'w') as writeJSON:
        json.dump(json_arr, writeJSON, ensure_ascii=False)


def scrape_data():
    try:
        html = requests.get(CITY_COUNCIL_URL).content
        soup = BS(html, 'lxml')
        # results is usually what needs to get changed
        results = soup.findAll('div', {"class": "elementor-widget-container"})
        members_urls = []
        for result in results:
            if len((result.findAll('a'))):
                res = result.findAll('a')[0]
                if 'href' in res.attrs:
                    rhref = res['href']
                    if 'district' in rhref and 'find' not in rhref:
                        members_urls.append(rhref)
        del members_urls[0]
        return members_urls
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


def scrape_member_names(member_urls):
    try:
        member_names = []
        for url in member_urls:
            html = requests.get(url).content
            soup = BS(html, 'lxml')
            # results is usually what needs to get changed
            results = soup.findAll(
                'span', {"class": "uc_style_persona_hero_elementor_title"})
            for result in results:
                member_names.append(result.contents[0])
        for i, inter in enumerate(member_names):
            if 'President Pro Tem' in inter:
                temp = inter.split(' ')[3:]
                temp.pop()
                temp = ' '.join(temp)[:-1]
                member_names[i] = temp
            elif 'President' in inter:
                temp = inter.split(' ')[1:]
                temp = ' '.join(temp)
                member_names[i] = temp
        return member_names
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


def append_mayor(members_arr):
    try:
        html = requests.get(MAYOR_NAME_URL).content
        soup = BS(html, 'lxml')
        # results is usually what needs to get changed
        results = soup.findAll('table', {"class": "vcard"})
        inter_arr = []
        for result in results:
            res = result.findAll('td', {"class": "infobox-data"})
            for r in res:
                if (len(r.findAll('a'))):
                    inter_arr.append(r.findAll('a')[0])
        members_arr.insert(0, inter_arr[4].contents[0])
        return members_arr
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


def scrape_member_img_urls(member_urls):
    try:
        member_img_urls = []
        for url in member_urls:
            html = requests.get(url).content
            soup = BS(html, 'lxml')
            # results is usually what needs to get changed
            results = soup.findAll('div', {"class": "uc_content_half"})
            for result in results:
                res = result.findAll('img')
                for r in res:
                    if 'src' in r.attrs and 'http' in r['src']:
                        member_img_urls.append(r['src'])
        return member_img_urls
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


def append_mayor_url(img_urls):
    try:
        html = requests.get(MAYOR_IMG_URL).content
        soup = BS(html, 'lxml')
        # results is usually what needs to get changed
        results = soup.findAll('div', {"id": "content"})
        inter_arr = []
        for result in results:
            res = (result.findAll('img'))
            for r in res:
                if 'srcset' in r.attrs:
                    inter_arr.append(
                        r['srcset'].split(',')[-1].strip().split(' ')[0])
        img_urls.insert(0, inter_arr[-1])
        return img_urls
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


if __name__ == "__main__":
    member_urls = scrape_data()
    results = scrape_member_names(member_urls)
    results = append_mayor(results)
    if results:
        parse_json(results)
    img_urls = scrape_member_img_urls(member_urls)
    img_urls = append_mayor_url(img_urls)
    download_images(img_urls)
