#!/usr/bin/env python3
# scrapes new senators names and images.
import os
import json
import logging
import copy
from unicodedata import normalize
import requests
from datetime import datetime
# Use requests_html when JS is required on website
# https://requests.readthedocs.io/projects/requests-html/en/latest/
from requests_html import HTMLSession

session = HTMLSession()

# Change based off of which site being scraped
BASE_URL = 'https://en.wikipedia.org/wiki/List_of_current_members_of_the_United_States_House_of_Representatives'
WIKI_URL = 'https://en.wikipedia.org'
IMG_PATH = './new_house/img/'

CURR_DATE = datetime.now().strftime('%d_%m_%Y')
LOG_FILENAME = f'log_{CURR_DATE}.txt'
os.makedirs(f'./new_house/json/', exist_ok=True)

log_format = '%(asctime)s - %(levelname)s - %(message)s'
logging.basicConfig(filename=LOG_FILENAME,
                    level=logging.INFO,
                    format=log_format)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(log_format))
logging.getLogger().addHandler(console_handler)


def download_images(img_urls):
    for k in img_urls.keys():
        if k < 10:
            dir_number = f"0{k}"
        else:
            dir_number = k
        os.makedirs(f'./new_house/img/{dir_number}', exist_ok=True)
        for i, url in enumerate(img_urls[k]):
            img_number = ''
            if i < 10:
                img_number = f"0{i+1}"
            else:
                img_number = f"{i+1}"
            file_name = f"./new_house/img/{dir_number}/{img_number}.jpg"
            img_data = requests.get(
                url,
                stream=True,
                headers={
                    'User-agent': 'Mozilla/5.0'
                },
            ).content
            file = open(f'{file_name}', 'wb')
            file.write(img_data)
            logging.info(f"Downloaded image for state_id: {k}")


def scrape_img_urls():
    try:
        f = open('./base_states_ids_names.json')
        states_by_id = json.load(f)
        r = session.get(BASE_URL)
        # r.html actually works, lsp doesn't like it for some reason...
        results = r.html.find('#votingmembers')
        #  image_urls = []
        data = []
        for result in results:
            trs = result.find('tr')
            for tr in trs:
                ths = tr.find('th')
                tds = tr.find('td')
                dict = {}
                for th in ths:
                    if 'scope' in th.attrs and th.attrs['scope'] == 'row':
                        a_tags = th.find('a')
                        for a_tag in a_tags:
                            dict['state_name'] = copy.deepcopy(
                                normalize("NFKD", a_tag.text))
                for td in tds:
                    imgs = td.find('img')
                    for img in imgs:
                        if 'jpg' in img.attrs['src']:
                            url = img.attrs['src'].split('.jpg')[0].replace(
                                'thumb/', '')
                            dict['wiki_img_url'] = copy.deepcopy(
                                f"https:{url}.jpg")
                        elif 'JPG' in img.attrs['src']:
                            url = img.attrs['src'].split('.JPG')[0].replace(
                                'thumb/', '')
                            dict['wiki_img_url'] = copy.deepcopy(
                                f"https:{url}.JPG")
                        elif 'jpeg' in img.attrs['src']:
                            url = img.attrs['src'].split('.jpeg')[0].replace(
                                'thumb/', '')
                            dict['wiki_img_url'] = copy.deepcopy(
                                f"https:{url}.jpeg")
                        elif 'png' in img.attrs['src']:
                            url = img.attrs['src'].split('.png')[0].replace(
                                'thumb/', '')
                            dict['wiki_img_url'] = copy.deepcopy(
                                f"https:{url}.png")
                if dict:
                    data.append(dict)
        for i, d in enumerate(data):
            for state in states_by_id:
                if state['state_name'] in d['state_name']:
                    data[i]['state_id'] = state['state_id']
            if 'wiki_img_url' not in data[i].keys():
                data[i]['wiki_img_url'] = None
            del data[i]['state_name']
        img_by_id = {}
        for i, d in enumerate(data):
            if d['state_id'] not in img_by_id:
                img_by_id[d['state_id']] = []
        for k in img_by_id.keys():
            for i, d in enumerate(data):
                if d['state_id'] == k:
                    if d['wiki_img_url'] != None:
                        img_by_id[k].append(d['wiki_img_url'])
        return img_by_id
    except Exception as e:
        logging.error(f'Error during scraping: {str(e)}')
        return False


def scrape_data():
    try:
        f = open('./base_states_ids_names.json')
        states_by_id = json.load(f)
        r = session.get(BASE_URL)
        # r.html actually works, lsp doesn't like it for some reason...
        results = r.html.find('#votingmembers')
        data = []
        for result in results:
            trs = result.find('tr')
            for tr in trs:
                ths = tr.find('th')
                tds = tr.find('td')
                dict = {}
                for th in ths:
                    if 'scope' in th.attrs and th.attrs['scope'] == 'row':
                        a_tags = th.find('a')
                        for a_tag in a_tags:
                            dict['state_name'] = copy.deepcopy(
                                normalize("NFKD", a_tag.text))
                for td in tds:
                    bs = td.find('b')
                    for b in bs:
                        a_tags = b.find('a')
                        for a_tag in a_tags:
                            if len(a_tag.text):
                                dict['delegate_name'] = copy.deepcopy(
                                    a_tag.text)
                if dict:
                    data.append(dict)
        for i, d in enumerate(data):
            for state in states_by_id:
                if state['state_name'] in d['state_name']:
                    data[i]['state_id'] = state['state_id']
            if 'delegate_name' not in data[i].keys():
                data[i]['delegate_name'] = None
            del data[i]['state_name']
        try:
            count = 0
            for i, d in enumerate(data):
                count = count + 1
                if data[i]['state_id'] == data[i + 1]['state_id']:
                    data[i][
                        'img_url'] = f"https://citystats.xyz/images/states/{data[i]['state_id']}/house_delegation/{count}"
                else:
                    data[i][
                        'img_url'] = f"https://citystats.xyz/images/states/{data[i]['state_id']}/house_delegation/{count}"
                    count = 0
                # Handle Out of Index Edge Case where data[i+1] doesn't exist at last element
                data[-1][
                    'img_url'] = f"https://citystats.xyz/images/states/{data[i+1]['state_id']}/house_delegation/{count+1}"
        except IndexError:
            None
        f.close()
        return data

    except Exception as e:
        logging.error(f'Error during scraping: {str(e)}')
        return False


if __name__ == "__main__":
    delegates_names = scrape_data()
    if delegates_names:
        with open(f'./new_house/json/base_state_delegates.json',
                  'w') as writeJSON:
            json.dump(delegates_names, writeJSON, ensure_ascii=False)
    img_urls = scrape_img_urls()
    #  senate_ids_urls = scrape_urls()
    #  make_img_dirs(senate_ids_urls)
    #  base_img_urls = grab_base_img_urls_from(senate_ids_urls)
    #  senate_ids_img_urls = grab_img_urls_from(base_img_urls)
    download_images(img_urls)
