#!/usr/bin/env python3
# scrapes council member names and images.
import os
from urllib.parse import unquote
import json
import logging
import requests
from datetime import datetime
# Use requests_html when JS is required on website
# https://requests.readthedocs.io/projects/requests-html/en/latest/
from requests_html import HTMLSession

session = HTMLSession()

# Change based off of which site being scraped
CITY_ID = 48
BASE_URL = 'https://www.charleston-sc.gov'
CITY_COUNCIL_URL = 'https://www.charleston-sc.gov/180/Members-Districts'
MAYOR_URL = 'https://www.charleston-sc.gov/401/Biography'
BASE_IMG_PATH = f'https://www.citystats.xyz/images/cities/{CITY_ID}'

PATH_ID = f'0{CITY_ID}'
IMG_PATH = f'./new_council_members/img/{PATH_ID}/'

CURR_DATE = datetime.now().strftime('%d_%m_%Y')
LOG_FILENAME = f'log_{CURR_DATE}.txt'

os.makedirs(os.path.dirname(IMG_PATH), exist_ok=True)

log_format = '%(asctime)s - %(levelname)s - %(message)s'
logging.basicConfig(filename=LOG_FILENAME,
                    level=logging.INFO,
                    format=log_format)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(log_format))
logging.getLogger().addHandler(console_handler)


def parse_json(results):
    json_arr = []
    for result in results:
        data = {}
        data['city_id'] = CITY_ID
        # council_member usually needs to be changed
        data['council_member'] = result
        data['img_url'] = None
        json_arr.append(data)
    with open(f'./new_council_members/json/{PATH_ID}.json', 'w') as writeJSON:
        json.dump(json_arr, writeJSON, ensure_ascii=False)


def scrape_data():
    try:
        r = session.get(CITY_COUNCIL_URL)
        # r.html actually works, lsp doesn't like it for some reason...
        data = []
        results = r.html.find('.fr-view')
        for result in results:
            res = result.find('a')
            if len(res):
                for r in res:
                    data.append(r.text)
        #  print(res)
        return data[0:12]
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


def append_mayor(members_names):
    try:
        r = session.get(MAYOR_URL)
        # r.html actually works, lsp doesn't like it for some reason...
        results = r.html.find('h2.subhead1')
        for result in results:
            if 'About' in result.text:
                members_names.insert(0, ' '.join(result.text.split(' ')[-2:]))
        return members_names
    except Exception as e:
        logging.error(f'Error at city_id: {CITY_ID} during scraping: {str(e)}')
        return False


if __name__ == "__main__":
    members_names = scrape_data()
    results = append_mayor(members_names)
    if results:
        parse_json(results)
    logging.info(f'No images scraped for city_id: {CITY_ID}')
